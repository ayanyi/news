!function (a) {
    "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof exports ? a(require("jquery")) : a(jQuery)
}(function (a) {
    function b(a) {
        return h.raw ? a : encodeURIComponent(a)
    }

    function c(a) {
        return h.raw ? a : decodeURIComponent(a)
    }

    function d(a) {
        return b(h.json ? JSON.stringify(a) : String(a))
    }

    function e(a) {
        0 === a.indexOf('"') && (a = a.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\"));
        try {
            return a = decodeURIComponent(a.replace(g, " ")), h.json ? JSON.parse(a) : a
        } catch (b) {}
    }

    function f(b, c) {
        var d = h.raw ? b : e(b);
        return a.isFunction(c) ? c(d) : d
    }
    var g = /\+/g,
        h = a.cookie = function (e, g, i) {
            if (void 0 !== g && !a.isFunction(g)) {
                if (i = a.extend({}, h.defaults, i), "number" == typeof i.expires) {
                    var j = i.expires,
                        k = i.expires = new Date;
                    k.setTime(+k + 864e5 * j)
                }
                return document.cookie = [b(e), "=", d(g), i.expires ? "; expires=" + i.expires.toUTCString() : "", i.path ? "; path=" + i.path : "", i.domain ? "; domain=" + i.domain : "", i.secure ? "; secure" : ""].join("")
            }
            for (var l = e ? void 0 : {}, m = document.cookie ? document.cookie.split("; ") : [], n = 0, o = m.length; o > n; n++) {
                var p = m[n].split("="),
                    q = c(p.shift()),
                    r = p.join("=");
                if (e && e === q) {
                    l = f(r, g);
                    break
                }
                e || void 0 === (r = f(r)) || (l[q] = r)
            }
            return l
        };
    h.defaults = {}, a.removeCookie = function (b, c) {
        return void 0 === a.cookie(b) ? !1 : (a.cookie(b, "", a.extend({}, c, {
            expires: -1
        })), !a.cookie(b))
    }
});
(function ($) {
    var rotateLeft = function (lValue, iShiftBits) {
        return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits))
    };
    var addUnsigned = function (lX, lY) {
        var lX4, lY4, lX8, lY8, lResult;
        lX8 = (lX & 2147483648);
        lY8 = (lY & 2147483648);
        lX4 = (lX & 1073741824);
        lY4 = (lY & 1073741824);
        lResult = (lX & 1073741823) + (lY & 1073741823);
        if (lX4 & lY4) {
            return (lResult ^ 2147483648 ^ lX8 ^ lY8)
        }
        if (lX4 | lY4) {
            if (lResult & 1073741824) {
                return (lResult ^ 3221225472 ^ lX8 ^ lY8)
            } else {
                return (lResult ^ 1073741824 ^ lX8 ^ lY8)
            }
        } else {
            return (lResult ^ lX8 ^ lY8)
        }
    };
    var F = function (x, y, z) {
        return (x & y) | ((~x) & z)
    };
    var G = function (x, y, z) {
        return (x & z) | (y & (~z))
    };
    var H = function (x, y, z) {
        return (x ^ y ^ z)
    };
    var I = function (x, y, z) {
        return (y ^ (x | (~z)))
    };
    var FF = function (a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(F(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b)
    };
    var GG = function (a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(G(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b)
    };
    var HH = function (a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(H(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b)
    };
    var II = function (a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(I(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b)
    };
    var convertToWordArray = function (string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWordsTempOne = lMessageLength + 8;
        var lNumberOfWordsTempTwo = (lNumberOfWordsTempOne - (lNumberOfWordsTempOne % 64)) / 64;
        var lNumberOfWords = (lNumberOfWordsTempTwo + 1) * 16;
        var lWordArray = Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while (lByteCount < lMessageLength) {
            lWordCount = (lByteCount - (lByteCount % 4)) / 4;
            lBytePosition = (lByteCount % 4) * 8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
            lByteCount++
        }
        lWordCount = (lByteCount - (lByteCount % 4)) / 4;
        lBytePosition = (lByteCount % 4) * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (128 << lBytePosition);
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray
    };
    var wordToHex = function (lValue) {
        var WordToHexValue = "",
            WordToHexValueTemp = "",
            lByte, lCount;
        for (lCount = 0; lCount <= 3; lCount++) {
            lByte = (lValue >>> (lCount * 8)) & 255;
            WordToHexValueTemp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValueTemp.substr(WordToHexValueTemp.length - 2, 2)
        }
        return WordToHexValue
    };
    var uTF8Encode = function (string) {
        string = string.replace(/\x0d\x0a/g, "\x0a");
        var output = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                output += String.fromCharCode(c)
            } else {
                if ((c > 127) && (c < 2048)) {
                    output += String.fromCharCode((c >> 6) | 192);
                    output += String.fromCharCode((c & 63) | 128)
                } else {
                    output += String.fromCharCode((c >> 12) | 224);
                    output += String.fromCharCode(((c >> 6) & 63) | 128);
                    output += String.fromCharCode((c & 63) | 128)
                }
            }
        }
        return output
    };
    $.extend({
        md5: function (string) {
            var x = Array();
            var k, AA, BB, CC, DD, a, b, c, d;
            var S11 = 7,
                S12 = 12,
                S13 = 17,
                S14 = 22;
            var S21 = 5,
                S22 = 9,
                S23 = 14,
                S24 = 20;
            var S31 = 4,
                S32 = 11,
                S33 = 16,
                S34 = 23;
            var S41 = 6,
                S42 = 10,
                S43 = 15,
                S44 = 21;
            string = uTF8Encode(string);
            x = convertToWordArray(string);
            a = 1732584193;
            b = 4023233417;
            c = 2562383102;
            d = 271733878;
            for (k = 0; k < x.length; k += 16) {
                AA = a;
                BB = b;
                CC = c;
                DD = d;
                a = FF(a, b, c, d, x[k + 0], S11, 3614090360);
                d = FF(d, a, b, c, x[k + 1], S12, 3905402710);
                c = FF(c, d, a, b, x[k + 2], S13, 606105819);
                b = FF(b, c, d, a, x[k + 3], S14, 3250441966);
                a = FF(a, b, c, d, x[k + 4], S11, 4118548399);
                d = FF(d, a, b, c, x[k + 5], S12, 1200080426);
                c = FF(c, d, a, b, x[k + 6], S13, 2821735955);
                b = FF(b, c, d, a, x[k + 7], S14, 4249261313);
                a = FF(a, b, c, d, x[k + 8], S11, 1770035416);
                d = FF(d, a, b, c, x[k + 9], S12, 2336552879);
                c = FF(c, d, a, b, x[k + 10], S13, 4294925233);
                b = FF(b, c, d, a, x[k + 11], S14, 2304563134);
                a = FF(a, b, c, d, x[k + 12], S11, 1804603682);
                d = FF(d, a, b, c, x[k + 13], S12, 4254626195);
                c = FF(c, d, a, b, x[k + 14], S13, 2792965006);
                b = FF(b, c, d, a, x[k + 15], S14, 1236535329);
                a = GG(a, b, c, d, x[k + 1], S21, 4129170786);
                d = GG(d, a, b, c, x[k + 6], S22, 3225465664);
                c = GG(c, d, a, b, x[k + 11], S23, 643717713);
                b = GG(b, c, d, a, x[k + 0], S24, 3921069994);
                a = GG(a, b, c, d, x[k + 5], S21, 3593408605);
                d = GG(d, a, b, c, x[k + 10], S22, 38016083);
                c = GG(c, d, a, b, x[k + 15], S23, 3634488961);
                b = GG(b, c, d, a, x[k + 4], S24, 3889429448);
                a = GG(a, b, c, d, x[k + 9], S21, 568446438);
                d = GG(d, a, b, c, x[k + 14], S22, 3275163606);
                c = GG(c, d, a, b, x[k + 3], S23, 4107603335);
                b = GG(b, c, d, a, x[k + 8], S24, 1163531501);
                a = GG(a, b, c, d, x[k + 13], S21, 2850285829);
                d = GG(d, a, b, c, x[k + 2], S22, 4243563512);
                c = GG(c, d, a, b, x[k + 7], S23, 1735328473);
                b = GG(b, c, d, a, x[k + 12], S24, 2368359562);
                a = HH(a, b, c, d, x[k + 5], S31, 4294588738);
                d = HH(d, a, b, c, x[k + 8], S32, 2272392833);
                c = HH(c, d, a, b, x[k + 11], S33, 1839030562);
                b = HH(b, c, d, a, x[k + 14], S34, 4259657740);
                a = HH(a, b, c, d, x[k + 1], S31, 2763975236);
                d = HH(d, a, b, c, x[k + 4], S32, 1272893353);
                c = HH(c, d, a, b, x[k + 7], S33, 4139469664);
                b = HH(b, c, d, a, x[k + 10], S34, 3200236656);
                a = HH(a, b, c, d, x[k + 13], S31, 681279174);
                d = HH(d, a, b, c, x[k + 0], S32, 3936430074);
                c = HH(c, d, a, b, x[k + 3], S33, 3572445317);
                b = HH(b, c, d, a, x[k + 6], S34, 76029189);
                a = HH(a, b, c, d, x[k + 9], S31, 3654602809);
                d = HH(d, a, b, c, x[k + 12], S32, 3873151461);
                c = HH(c, d, a, b, x[k + 15], S33, 530742520);
                b = HH(b, c, d, a, x[k + 2], S34, 3299628645);
                a = II(a, b, c, d, x[k + 0], S41, 4096336452);
                d = II(d, a, b, c, x[k + 7], S42, 1126891415);
                c = II(c, d, a, b, x[k + 14], S43, 2878612391);
                b = II(b, c, d, a, x[k + 5], S44, 4237533241);
                a = II(a, b, c, d, x[k + 12], S41, 1700485571);
                d = II(d, a, b, c, x[k + 3], S42, 2399980690);
                c = II(c, d, a, b, x[k + 10], S43, 4293915773);
                b = II(b, c, d, a, x[k + 1], S44, 2240044497);
                a = II(a, b, c, d, x[k + 8], S41, 1873313359);
                d = II(d, a, b, c, x[k + 15], S42, 4264355552);
                c = II(c, d, a, b, x[k + 6], S43, 2734768916);
                b = II(b, c, d, a, x[k + 13], S44, 1309151649);
                a = II(a, b, c, d, x[k + 4], S41, 4149444226);
                d = II(d, a, b, c, x[k + 11], S42, 3174756917);
                c = II(c, d, a, b, x[k + 2], S43, 718787259);
                b = II(b, c, d, a, x[k + 9], S44, 3951481745);
                a = addUnsigned(a, AA);
                b = addUnsigned(b, BB);
                c = addUnsigned(c, CC);
                d = addUnsigned(d, DD)
            }
            var tempValue = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);
            return tempValue.toLowerCase()
        }
    })
})(jQuery);

function lcf(a, b, c, d, x, s, t) {
    return lce((b & c) | ((~b) & d), a, b, x, s, t)
}

function lcg(a, b, c, d, x, s, t) {
    return lce((b & d) | (c & (~d)), a, b, x, s, t)
}

function lce(q, a, b, x, s, t) {
    return lcl(lcc(lcl(lcl(a, q), lcl(x, t)), s), b)
}

function lch(a, b, c, d, x, s, t) {
    return lce(b ^ c ^ d, a, b, x, s, t)
}

function lci(a, b, c, d, x, s, t) {
    return lce(c ^ (b | (~d)), a, b, x, s, t)
}

function lcb(x) {
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;
    if (x !== "1") {
        for (var i = 0; i < x.length; i += 16) {
            var a1 = a;
            var b1 = b;
            var c1 = c;
            var d1 = d;
            a = lcf(a, b, c, d, x[i + 0], 7, -680876936);
            d = lcf(d, a, b, c, x[i + 1], 12, -389564586);
            c = lcf(c, d, a, b, x[i + 2], 17, 606105819);
            b = lcf(b, c, d, a, x[i + 3], 22, -1044525330);
            a = lcf(a, b, c, d, x[i + 4], 7, -176418897);
            d = lcf(d, a, b, c, x[i + 5], 12, 1200080426);
            c = lcf(c, d, a, b, x[i + 6], 17, -1473231341);
            b = lcf(b, c, d, a, x[i + 7], 22, -45705983);
            a = lcf(a, b, c, d, x[i + 8], 7, 1770035416);
            d = lcf(d, a, b, c, x[i + 9], 12, -1958414417);
            c = lcf(c, d, a, b, x[i + 10], 17, -42063);
            b = lcf(b, c, d, a, x[i + 11], 22, -1990404162);
            a = lcf(a, b, c, d, x[i + 12], 7, 1804603682);
            d = lcf(d, a, b, c, x[i + 13], 12, -40341101);
            c = lcf(c, d, a, b, x[i + 14], 17, -1502002290);
            b = lcf(b, c, d, a, x[i + 15], 22, 1236535329);
            a = lcg(a, b, c, d, x[i + 1], 5, -165796510);
            d = lcg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = lcg(c, d, a, b, x[i + 11], 14, 643717713);
            b = lcg(b, c, d, a, x[i + 0], 20, -373897302);
            a = lcg(a, b, c, d, x[i + 5], 5, -701558691);
            d = lcg(d, a, b, c, x[i + 10], 9, 38016083);
            c = lcg(c, d, a, b, x[i + 15], 14, -660478335);
            b = lcg(b, c, d, a, x[i + 4], 20, -405537848);
            a = lcg(a, b, c, d, x[i + 9], 5, 568446438);
            d = lcg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = lcg(c, d, a, b, x[i + 3], 14, -187363961);
            b = lcg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = lcg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = lcg(d, a, b, c, x[i + 2], 9, -51403784);
            c = lcg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = lcg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = lch(a, b, c, d, x[i + 5], 4, -378558);
            d = lch(d, a, b, c, x[i + 8], 11, -2022574463);
            c = lch(c, d, a, b, x[i + 11], 16, 1839030562);
            b = lch(b, c, d, a, x[i + 14], 23, -35309556);
            a = lch(a, b, c, d, x[i + 1], 4, -1530992060);
            d = lch(d, a, b, c, x[i + 4], 11, 1272893353);
            c = lch(c, d, a, b, x[i + 7], 16, -155497632);
            b = lch(b, c, d, a, x[i + 10], 23, -1094730640);
            a = lch(a, b, c, d, x[i + 13], 4, 681279174);
            d = lch(d, a, b, c, x[i + 0], 11, -358537222);
            c = lch(c, d, a, b, x[i + 3], 16, -722521979);
            b = lch(b, c, d, a, x[i + 6], 23, 76029189);
            a = lch(a, b, c, d, x[i + 9], 4, -640364487);
            d = lch(d, a, b, c, x[i + 12], 11, -421815835);
            c = lch(c, d, a, b, x[i + 15], 16, 530742520);
            b = lch(b, c, d, a, x[i + 2], 23, -995338651);
            a = lci(a, b, c, d, x[i + 0], 6, -198630844);
            d = lci(d, a, b, c, x[i + 7], 10, 1126891415);
            c = lci(c, d, a, b, x[i + 14], 15, -1416354905);
            b = lci(b, c, d, a, x[i + 5], 21, -57434055);
            a = lci(a, b, c, d, x[i + 12], 6, 1700485571);
            d = lci(d, a, b, c, x[i + 3], 10, -1894986606);
            c = lci(c, d, a, b, x[i + 10], 15, -1051523);
            b = lci(b, c, d, a, x[i + 1], 21, -2054922799);
            a = lci(a, b, c, d, x[i + 8], 6, 1873313359);
            d = lci(d, a, b, c, x[i + 15], 10, -30611744);
            c = lci(c, d, a, b, x[i + 6], 15, -1560198380);
            b = lci(b, c, d, a, x[i + 13], 21, 1309151649);
            a = lci(a, b, c, d, x[i + 4], 6, -145523070);
            d = lci(d, a, b, c, x[i + 11], 10, -1120210379);
            c = lci(c, d, a, b, x[i + 2], 15, 718787259);
            b = lci(b, c, d, a, x[i + 9], 21, -343485551);
            a = lcl(a, a1);
            b = lcl(b, b1);
            c = lcl(c, c1);
            d = lcl(d, d1)
        }
        return [a, b, c, d]
    } else {
        return [a, d, c, b]
    }
}

function md(str) {
    var c1, c2, c3, c4;
    var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);
    var i = 0,
        len = str.length,
        string = "";
    while (i < len) {
        do {
            c1 = base64DecodeChars[str.charCodeAt(i++) & 255]
        } while (i < len && c1 == -1);
        if (c1 == -1) {
            break
        }
        do {
            c2 = base64DecodeChars[str.charCodeAt(i++) & 255]
        } while (i < len && c2 == -1);
        if (c2 == -1) {
            break
        }
        string += String.fromCharCode((c1 << 2) | ((c2 & 48) >> 4));
        do {
            c3 = str.charCodeAt(i++) & 255;
            if (c3 == 61) {
                return string
            }
            c3 = base64DecodeChars[c3]
        } while (i < len && c3 == -1);
        if (c3 == -1) {
            break
        }
        string += String.fromCharCode(((c2 & 15) << 4) | ((c3 & 60) >> 2));
        do {
            c4 = str.charCodeAt(i++) & 255;
            if (c4 == 61) {
                return string
            }
            c4 = base64DecodeChars[c4]
        } while (i < len && c4 == -1);
        if (c4 == -1) {
            break
        }
        string += String.fromCharCode(((c3 & 3) << 6) | c4)
    }
    return string
}

function lcl(x, y) {
    var a = (x & 0xFFFF) + (y & 0xFFFF);
    var b = (x >> 16) + (y >> 16) + (a >> 16);
    return (b << 16) | (a & 0xFFFF)
};

function lcc(a, b) {
    return (a << b) | (a >>> (32 - b))
};

function lca(t) {
    var a = "0123456789abcdef";
    var b = "";
    for (var i = 0; i < t.length * 4; i++) {
        b += a.charAt((t[i >> 2] >> ((i % 4) * 8 + 4)) & 0xF) + a.charAt((t[i >> 2] >> ((i % 4) * 8)) & 0xF)
    };
    return b
};

function lco(t) {
    var a = lcb(1) + t;
    return a.replace(/[\-|\,]/g, '')
};

function lcd(t) {
    var a = ((t.length + 8) >> 6) + 1;
    var b = new Array(a * 16);
    for (var i = 0; i < a * 16; i++) b[i] = 0;
    for (var i = 0; i < t.length; i++) b[i >> 2] |= (t.charCodeAt(i) & 0xFF) << ((i % 4) * 8);
    b[i >> 2] |= 0x80 << ((i % 4) * 8);
    b[a * 16 - 2] = t.length * 8;
    return b
}
var Base64Hex = (function () {
    var encode = function (str) {
        var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var out, i, len;
        var c1, c2, c3;
        len = str.length;
        i = 0;
        out = "";
        while (i < len) {
            c1 = str.charCodeAt(i++) & 255;
            if (i == len) {
                out += base64EncodeChars.charAt(c1 >> 2);
                out += base64EncodeChars.charAt((c1 & 3) << 4);
                out += "==";
                break
            }
            c2 = str.charCodeAt(i++);
            if (i == len) {
                out += base64EncodeChars.charAt(c1 >> 2);
                out += base64EncodeChars.charAt(((c1 & 3) << 4) | ((c2 & 240) >> 4));
                out += base64EncodeChars.charAt((c2 & 15) << 2);
                out += "=";
                break
            }
            c3 = str.charCodeAt(i++);
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt(((c1 & 3) << 4) | ((c2 & 240) >> 4));
            out += base64EncodeChars.charAt(((c2 & 15) << 2) | ((c3 & 192) >> 6));
            out += base64EncodeChars.charAt(c3 & 63)
        }
        return out
    };
    var decode = function (str) {
        var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);
        var c1, c2, c3, c4;
        var i, len, out;
        len = str.length;
        i = 0;
        out = "";
        while (i < len) {
            do {
                c1 = base64DecodeChars[str.charCodeAt(i++) & 255]
            } while (i < len && c1 == -1);
            if (c1 == -1) {
                break
            }
            do {
                c2 = base64DecodeChars[str.charCodeAt(i++) & 255]
            } while (i < len && c2 == -1);
            if (c2 == -1) {
                break
            }
            out += String.fromCharCode((c1 << 2) | ((c2 & 48) >> 4));
            do {
                c3 = str.charCodeAt(i++) & 255;
                if (c3 == 61) {
                    return out
                }
                c3 = base64DecodeChars[c3]
            } while (i < len && c3 == -1);
            if (c3 == -1) {
                break
            }
            out += String.fromCharCode(((c2 & 15) << 4) | ((c3 & 60) >> 2));
            do {
                c4 = str.charCodeAt(i++) & 255;
                if (c4 == 61) {
                    return out
                }
                c4 = base64DecodeChars[c4]
            } while (i < len && c4 == -1);
            if (c4 == -1) {
                break
            }
            out += String.fromCharCode(((c3 & 3) << 6) | c4)
        }
        return out
    };
    return {
        encode: encode,
        decode: decode
    }
})();
var authCrypt = (function () {
    var base64Encode = Base64Hex.encode;
    var base64Decode = Base64Hex.decode;
    var time = function () {
        var timeStamp = new Date().getTime();
        return parseInt(timeStamp / 1000)
    };
    var microtime = function (timeFloat) {
        var timeStamp = new Date().getTime();
        var sec = parseInt(timeStamp / 1000);
        return timeFloat ? (timeStamp / 1000) : (timeStamp - (sec * 1000)) / 1000 + " " + sec
    };
    var chr = function (s) {
        return String.fromCharCode(s)
    };
    var ord = function (s) {
        return s.charCodeAt()
    };
    var authcode = function (str, operation, key, expiry) {
        var operation = operation ? operation : "DECODE";
        var key = key ? key : "liangcheng";
        var expiry = expiry ? expiry : 0;
        var ckey_length = 4;
        key = md5(key);
        var keya = md5(key.substr(0, 16));
        var keyb = md5(key.substr(16, 16));
        if (ckey_length) {
            if (operation == "DECODE") {
                var keyc = str.substr(0, ckey_length)
            } else {
                var md5_time = md5(microtime());
                var start = md5_time.length - ckey_length;
                var keyc = md5_time.substr(start, ckey_length)
            }
        } else {
            var keyc = ""
        }
        var cryptkey = keya + md5(keya + keyc);
        var strbuf;
        if (operation == "DECODE") {
            str = str.substr(ckey_length);
            strbuf = base64Decode(str)
        } else {
            expiry = expiry ? expiry + time() : 0;
            tmpstr = expiry.toString();
            if (tmpstr.length >= 10) {
                str = tmpstr.substr(0, 10) + md5(str + keyb).substr(0, 16) + str
            } else {
                var count = 10 - tmpstr.length;
                for (var i = 0; i < count; i++) {
                    tmpstr = "0" + tmpstr
                }
                str = tmpstr + md5(str + keyb).substr(0, 16) + str
            }
            strbuf = str
        }
        var box = new Array(256);
        for (var i = 0; i < 256; i++) {
            box[i] = i
        }
        var rndkey = new Array();
        for (var i = 0; i < 256; i++) {
            rndkey[i] = cryptkey.charCodeAt(i % cryptkey.length)
        }
        for (var j = i = 0; i < 256; i++) {
            j = (j + box[i] + rndkey[i]) % 256;
            tmp = box[i];
            box[i] = box[j];
            box[j] = tmp
        }
        var s = "";
        strbuf = strbuf.split("");
        for (var a = j = i = 0; i < strbuf.length; i++) {
            a = (a + 1) % 256;
            j = (j + box[a]) % 256;
            tmp = box[a];
            box[a] = box[j];
            box[j] = tmp;
            s += chr(ord(strbuf[i]) ^ (box[(box[a] + box[j]) % 256]))
        }
        if (operation == "DECODE") {
            if ((s.substr(0, 10) == 0 || s.substr(0, 10) - time() > 0) && s.substr(10, 16) == md5(s.substr(26) + keyb).substr(0, 16)) {
                s = s.substr(26)
            } else {
                s = ""
            }
        } else {
            s = base64Encode(s);
            var regex = new RegExp("=", "g");
            s = s.replace(regex, "");
            s = keyc + s
        }
        return s
    };
    return {
        authcode: authcode,
        encode: function (string, key, expiry) {
            var result = authcode(string, "ENCODE", key, expiry);
            result = result.replace(/\+/g, "-");
            result = result.replace(/\//g, "_");
            result = result.replace(/=/g, ".");
            return result
        }, decode: function (string, key) {
            string = string.replace(/-/g, "+");
            string = string.replace(/_/g, "/");
            string = string.replace(/\./g, "=");
            var result = authcode(string, "DECODE", key);
            return result
        }
    }
})();
